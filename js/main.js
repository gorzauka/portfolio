!function(n){var r={};function e(c){if(r[c])return r[c].exports;var t=r[c]={i:c,l:!1,exports:{}};return n[c].call(t.exports,t,t.exports,e),t.l=!0,t.exports}e.m=n,e.c=r,e.d=function(n,r,c){e.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:c})},e.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},e.t=function(n,r){if(1&r&&(n=e(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var c=Object.create(null);if(e.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var t in n)e.d(c,t,function(r){return n[r]}.bind(null,t));return c},e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,"a",r),r},e.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},e.p="",e(e.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\r\n\r\n// service worker registration - remove if you're not going to use it\r\n\r\nif ('serviceWorker' in navigator) {\r\n  window.addEventListener('load', function () {\r\n    navigator.serviceWorker.register('serviceworker.js').then(function (registration) {\r\n      // Registration was successful\r\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\r\n    }, function (err) {\r\n      // registration failed :(\r\n      console.log('ServiceWorker registration failed: ', err);\r\n    });\r\n  });\r\n}\r\n\r\nconst reposList = document.querySelector(\".projects-content__list--js\");\r\n\r\nfetch(\"https://api.github.com/users/gorzauka/repos?sort=updated\")\r\n  .then(resp => resp.json())\r\n  .then(resp => {\r\n    const repos = resp;\r\n    for (const repo of repos) {\r\n      const { description, html_url, name } = repo;\r\n      reposList.innerHTML += `\r\n      <li class=\"projects-content__item\">\r\n      <a class=\"projects-content__link\" href='${repo.html_url}'>${repo.name}\r\n    </li>`\r\n    }\r\n  })\r\n\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5qcz85MjkxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsOEJBQThCO0FBQzNDO0FBQ0E7QUFDQSxnREFBZ0QsY0FBYyxJQUFJO0FBQ2xFO0FBQ0E7QUFDQSxHQUFHIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbi8vIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbiAtIHJlbW92ZSBpZiB5b3UncmUgbm90IGdvaW5nIHRvIHVzZSBpdFxyXG5cclxuaWYgKCdzZXJ2aWNlV29ya2VyJyBpbiBuYXZpZ2F0b3IpIHtcclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlZ2lzdGVyKCdzZXJ2aWNld29ya2VyLmpzJykudGhlbihmdW5jdGlvbiAocmVnaXN0cmF0aW9uKSB7XHJcbiAgICAgIC8vIFJlZ2lzdHJhdGlvbiB3YXMgc3VjY2Vzc2Z1bFxyXG4gICAgICBjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciByZWdpc3RyYXRpb24gc3VjY2Vzc2Z1bCB3aXRoIHNjb3BlOiAnLCByZWdpc3RyYXRpb24uc2NvcGUpO1xyXG4gICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAvLyByZWdpc3RyYXRpb24gZmFpbGVkIDooXHJcbiAgICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlV29ya2VyIHJlZ2lzdHJhdGlvbiBmYWlsZWQ6ICcsIGVycik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuY29uc3QgcmVwb3NMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0cy1jb250ZW50X19saXN0LS1qc1wiKTtcclxuXHJcbmZldGNoKFwiaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS91c2Vycy9nb3J6YXVrYS9yZXBvcz9zb3J0PXVwZGF0ZWRcIilcclxuICAudGhlbihyZXNwID0+IHJlc3AuanNvbigpKVxyXG4gIC50aGVuKHJlc3AgPT4ge1xyXG4gICAgY29uc3QgcmVwb3MgPSByZXNwO1xyXG4gICAgZm9yIChjb25zdCByZXBvIG9mIHJlcG9zKSB7XHJcbiAgICAgIGNvbnN0IHsgZGVzY3JpcHRpb24sIGh0bWxfdXJsLCBuYW1lIH0gPSByZXBvO1xyXG4gICAgICByZXBvc0xpc3QuaW5uZXJIVE1MICs9IGBcclxuICAgICAgPGxpIGNsYXNzPVwicHJvamVjdHMtY29udGVudF9faXRlbVwiPlxyXG4gICAgICA8YSBjbGFzcz1cInByb2plY3RzLWNvbnRlbnRfX2xpbmtcIiBocmVmPScke3JlcG8uaHRtbF91cmx9Jz4ke3JlcG8ubmFtZX1cclxuICAgIDwvbGk+YFxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")}]);